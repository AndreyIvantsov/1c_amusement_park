// @strict-types


#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.СписокНоменклатуры.Видимость = Истина;
	Элементы.ПозицииПродажиПодбор.Пометка = Истина;
	Элементы.ДекорацияБаллыКлиента.Видимость = Ложь;
	
	СоздатьДекорацииПопулярныхПокупок();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура БаллыКСписаниюПриИзменении(Элемент)
	
	РасчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	Элементы.ДекорацияБаллыКлиента.Видимость = ЗначениеЗаполнено(Клиент);
	КлиентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияБаллыКлиентаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "#Заполнить_") Тогда
		СтандартнаяОбработка = Ложь;
		БаллыКСписанию = Число(СтрЗаменить(НавигационнаяСсылкаФорматированнойСтроки, "#Заполнить_", ""));
		СуммаИтого = ПозицииПродажи.Итог("Сумма") - БаллыКСписанию;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Или ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьУникальнуюПозицию(ВыбраннаяСтрока, ДанныеСтроки.Цена);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Или ДанныеСтроки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ЗначениеПеретаскиванияТовара(ДанныеСтроки);
	
	ПараметрыПеретаскивания.Значение = Значение;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПозицииПродажи


&НаКлиенте
Процедура ПозицииПродажиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания) <> Тип("ПараметрыПеретаскивания") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Значение = ПараметрыПеретаскивания.Значение; // см. ЗначениеПеретаскиванияТовара
	ДобавитьУникальнуюПозицию(Значение.Номенклатура, Значение.Цена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиНоменклатураПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПозицииПродажи.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Цена = ЦенаНоменклатуры(ДанныеСтроки.Номенклатура);
	РассчитатьСуммуСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиЦенаПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПозицииПродажи.ТекущиеДанные;
	РассчитатьСуммуСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиКоличествоПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.ПозицииПродажи.ТекущиеДанные;
	РассчитатьСуммуСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПозицииПродажиПриИзменении(Элемент)
	
	РасчитатьСуммуДокумента();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьПроджажу(Команда)
	
	НовыйДокумент = ЗаписатьПродажуНаСервере();
	
	ОповеститьОбИзменении(НовыйДокумент);
	
	ПоказатьОповещениеПользователя(
		"Создать документ",
		ПолучитьНавигационнуюСсылку(НовыйДокумент),
		Строка(НовыйДокумент));
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Элементы.СписокНоменклатуры.Видимость = Не Элементы.СписокНоменклатуры.Видимость;
	Элементы.ПозицииПродажиПодбор.Пометка = Элементы.СписокНоменклатуры.Видимость;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Значение перетаскивания товара.
// 
// Параметры:
//  ДанныеСтроки - ДанныеФормыСтруктура - Данные строки
// 
// Возвращаемое значение:
//  Структура - Значение перетаскивания товара:
// * Номенклатура - СправочникСсылка.Номенклатура - Номенклатура
// * Цена - Число - Цена номенклатуры
&НаКлиенте
Функция ЗначениеПеретаскиванияТовара(ДанныеСтроки)
	
	Значение = Новый Структура();
	Значение.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
	Значение.Вставить("Цена", ДанныеСтроки.Цена);
	
	Возврат Значение;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьУникальнуюПозицию(Номенклатура, Цена)

	Отбор = Новый Структура("Номенклатура", Номенклатура);
	
	НайденныеСтроки = ПозицииПродажи.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ПозицииПродажи.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.Цена = Цена;
	НоваяСтрока.Количество = 1;
	НоваяСтрока.Сумма = НоваяСтрока.Цена;	
	
	РасчитатьСуммуДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.Сумма = ДанныеСтроки.Цена * ДанныеСтроки.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьСуммуДокумента()
	
	СуммаИтого = ПозицииПродажи.Итог("Сумма") - БаллыКСписанию;	
	ЗаполнитьДекорациюБаллыКлиента();
	
КонецПроцедуры

// Подключаемый декорация популярных товаров при нажатии.
// 
// Параметры:
//  Элемент - ДекорацияФормы
&НаКлиенте
Процедура Подключаемый_ДекорацияПопулярныхТоваровПриНажатии(Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	
	Фильтр = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденныеСтроки = ДинамическиеЭлементы.НайтиСтроки(Фильтр);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = НайденныеСтроки[0];
	Номенклатура = Строка.Номенклатура;
	
	ДобавитьУникальнуюПозицию(Номенклатура, ЦенаНоменклатуры(Номенклатура));
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПродажуНаСервере()
	
	ДокОбъект = Документы.ПродажаБилета.СоздатьДокумент();
	ДокОбъект.Заполнить(Неопределено);
	
	ДокОбъект.Дата = ТекущаяДатаСеанса();
	ДокОбъект.Клиент = Клиент;
	ДокОбъект.ПозицииПродажи.Загрузить(ПозицииПродажи.Выгрузить());
	ДокОбъект.БаллыКСписанию = БаллыКСписанию;
	ДокОбъект.СуммаДокумента = СуммаИтого;
	
	Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение "Не удалось записать продажу.";
	КонецЕсли;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	СброситьЗаполнениеФормы();
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

&НаСервере
Процедура СброситьЗаполнениеФормы()
	
	Клиент = Справочники.Клиенты.ПустаяСсылка();
	ПозицииПродажи.Очистить();
	БаллыКСписанию = 0;
	СуммаИтого = 0;
	СброситьПопулярныеПокупки();
	ЗаполнитьДекорацииПопулярныхПокупок();
	
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере()
	
	ЗаполнитьДекорациюБаллыКлиента();
	ЗаполнитьПопулярныеПокупкиКлиента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорациюБаллыКлиента()
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БонусныеБаллыКлиентовОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.БонусныеБаллыКлиентов.Остатки(, Клиент = &Клиент) КАК БонусныеБаллыКлиентовОстатки";
	
	Запрос.УстановитьПараметр("Клиент", Клиент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Элементы.ДекорацияБаллыКлиента.Заголовок = "У клиента нет начисленных баллов";	
		Возврат;		
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	МаксимальнаяДоля = Константы.МаксимальнаяДоляОплатыБаллами.Получить();
	ОстатокБаллов = Выборка.СуммаОстаток;
	МаксимумБалловКСписанию = Мин(ОстатокБаллов, СуммаИтого * МаксимальнаяДоля / 100);
	
	Часть1 = СтрШаблон(" Накоплено %1 баллов, из них можно списать %2. ", ОстатокБаллов, МаксимумБалловКСписанию);
	Часть2 = Новый ФорматированнаяСтрока("Заполнить",,,, СтрШаблон("#Заполнить_%1", XMLСтрока(МаксимумБалловКСписанию)));
	Элементы.ДекорацияБаллыКлиента.Заголовок = Новый ФорматированнаяСтрока(Часть1, Часть2);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПопулярныеПокупкиКлиента()

	СброситьПопулярныеПокупки();

	Если ЗначениеЗаполнено(Клиент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
		|	ПродажиОбороты.Номенклатура
		|ИЗ
		|	РегистрНакопления.Продажи.Обороты(&НачалоПериода, &КонецПериода,, Клиент = &Клиент) КАК ПродажиОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПродажиОбороты.СуммаДокументаОборот УБЫВ";

		КонецПериода = ТекущаяДатаСеанса();

		Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(КонецПериода, -3));
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		Запрос.УстановитьПараметр("Клиент", Клиент);

		РезультатЗапроса = Запрос.Выполнить();

		Если Не РезультатЗапроса.Пустой() Тогда
			Счетчик = 0;
			Выборка = РезультатЗапроса.Выбрать();

			Пока Выборка.Следующий() Цикл
				ТекущаяСтрока = ДинамическиеЭлементы[Счетчик];
				ТекущаяСтрока.Активность = Истина;
				ТекущаяСтрока.Номенклатура = Выборка.Номенклатура;
				Счетчик = Счетчик + 1;
			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

	ЗаполнитьДекорацииПопулярныхПокупок();

КонецПроцедуры

&НаСервере
Процедура СброситьПопулярныеПокупки()
	
	Для каждого Строка Из ДинамическиеЭлементы Цикл
		Строка.Активность = Ложь;
		Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДекорацииПопулярныхПокупок()
	
	КоличествоПопулярныхПокупок = 3;
	
	Для Сч = 1 По КоличествоПопулярныхПокупок Цикл
		ИмяДекорации = СтрШаблон("ДекорацияПопулярныхПокупок_%1", XMLСтрока(Сч));
		Декорация = Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), Элементы.ГруппаПопулярныеПокупки);
		Декорация.Вид = ВидДекорацииФормы.Надпись;
		Декорация.Видимость = Ложь;
		Декорация.Гиперссылка = Истина;
		Декорация.УстановитьДействие("Нажатие", "Подключаемый_ДекорацияПопулярныхТоваровПриНажатии");
		
		СтрокаОписанияДекорации = ДинамическиеЭлементы.Добавить();
		СтрокаОписанияДекорации.ИмяЭлемента = ИмяДекорации;
		СтрокаОписанияДекорации.Активность = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорацииПопулярныхПокупок()
	
	Для каждого Строка Из ДинамическиеЭлементы Цикл
		Элемент = Элементы[Строка.ИмяЭлемента];
		Элемент.Видимость = Строка.Активность;
		Элемент.Заголовок = Строка(Строка.Номенклатура);
	КонецЦикла;
	
КонецПроцедуры

// Цена номенклатуры.
// 
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - Номенклатура
// 
// Возвращаемое значение:
//  Число - Цена номенклатуры
&НаСервереБезКонтекста
Функция ЦенаНоменклатуры(Номенклатура)
	
	Возврат РегистрыСведений.ЦеныНоменклатуры.ЦенаНоменклатуры(Номенклатура, ТекущаяДатаСеанса());
	
КонецФункции

#КонецОбласти
