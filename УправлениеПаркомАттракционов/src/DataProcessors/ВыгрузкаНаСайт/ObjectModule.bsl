#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПодготовитьАрхив() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(УНИКАЛЬНЫЙИДЕНТИФИКАТОР(Аттракционы.Ссылка)) КАК Идентификатор,
	|	Аттракционы.Представление КАК Аттракцион,
	|	Аттракционы.ВидАттракциона.Представление КАК ВидАттракциона,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	Аттракционы.Фото
	|ИЗ
	|	Справочник.Аттракционы КАК Аттракционы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Аттракционы.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура";
	
	Выборка = Запрос.Выполнить().Выбрать();

	ИмяКаталога = ПолучитьИмяВременногоФайла("");
	СоздатьКаталог(ИмяКаталога);

	ОписаниеАттракционов = Новый Массив;
	ШаблонИмениКартинки = "%1%2img%2%3.jpg";
	Разделитель = ПолучитьРазделительПути();

	Пока Выборка.Следующий() Цикл
		ОписаниеАттракциона = Новый Структура;
		ОписаниеАттракциона.Вставить("Идентификатор", Выборка.Идентификатор);
		ОписаниеАттракциона.Вставить("Аттракцион", Выборка.Аттракцион);
		ОписаниеАттракциона.Вставить("ВидАттракциона", Выборка.ВидАттракциона);
		ОписаниеАттракциона.Вставить("Цена", Выборка.Цена);

		ДанныеФото = Выборка.Фото.Получить();

		Если ДанныеФото = Неопределено Тогда
			ОписаниеАттракциона.Вставить("ДанныеФото", Неопределено);
		Иначе

			ИмяФайла = СтрШаблон(ШаблонИмениКартинки, ИмяКаталога, Разделитель, Выборка.Идентификатор);
			ДанныеФото.Записать(ИмяФайла);
			ОписаниеАттракциона.Вставить("Фото", СтрШаблон(ШаблонИмениКартинки, "", Разделитель, Выборка.Идентификатор));
		КонецЕсли;

		ОписаниеАттракционов.Добавить(ОписаниеАттракциона);

	КонецЦикла;

	ШаблонИмениФайлаВыгрузки = "%1%2export.json";
	ИмяФайлаВыгрузки = СтрШаблон(ШаблонИмениФайлаВыгрузки, ИмяКаталога, Разделитель);

	Запись = Новый ЗаписьJSON;
	Запись.ОткрытьФайл(ИмяФайлаВыгрузки);
	ЗаписатьJSON(Запись, ОписаниеАттракционов);
	Запись.Закрыть();

	Архиватор = Новый ЗаписьZipФайла;
	Архиватор.Добавить(ИмяКаталога + Разделитель + "*.*", , РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ДанныеАрхива = Архиватор.ПолучитьДвоичныеДанные();

	УдалитьФайлы(ИмяКаталога);

	Возврат ПоместитьВоВременноеХранилище(ДанныеАрхива);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Код процедур и функций

#КонецОбласти

#КонецЕсли