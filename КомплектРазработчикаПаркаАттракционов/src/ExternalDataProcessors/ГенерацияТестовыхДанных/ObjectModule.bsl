// @strict-types


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Генерирует тестовые данные.
//
Процедура СгенерироватьДанные() Экспорт
	
	ТекстМакета = ПолучитьМакет("СлучайныеФИО").ПолучитьТекст();
	СписокПосетителей = СтрРазделить(ТекстМакета, Символы.ПС);
	КоличествоПосетителейВсего = СписокПосетителей.Количество();
	СписокАттракционов = СписокАттракционов();
	
	// Рассчитывает каждый день периода
	// В понедельник парк не работает
	// Определеяем сколько посетителей придет в парк
	// Коэффициент в выходные дни - 1.5
	// Выбираем случайных посетителей из списка
	
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	ДатаПосещения = Период.ДатаНачала;
	
	Пока ДатаПосещения < Период.ДатаОкончания Цикл
		Если ДеньНедели(ДатаПосещения) = 1 Тогда
			ДатаПосещения = ДатаПосещения + 84600;
			Продолжить;
		КонецЕсли;
		
		КоэффициентПосетителей = ?(ДеньНедели(ДатаПосещения) < 6, 1, 1.5);
		КоличествоПосетителейЗаДень = ГСЧ.СлучайноеЧисло(10, 30) * КоэффициентПосетителей;
		
		Для НомерПосетителя = 1 По КоличествоПосетителейЗаДень Цикл
			ИндексСлучайногоПосетителя = ГСЧ.СлучайноеЧисло(0, КоличествоПосетителейВсего - 1);
			ФИОПосетителя = СписокПосетителей[ИндексСлучайногоПосетителя ];
			Посетитель = ПолучитьПосетителя(ФИОПосетителя, ГСЧ);
			//@skip-check query-in-loop
			СформироватьПосещенияПосетителя(Посетитель, ДатаПосещения, СписокАттракционов, ГСЧ);
		КонецЦикла;
		
		ДатаПосещения = ДатаПосещения + 84600;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПосетителя(ФИОПосетителя, ГСЧ = Неопределено)
	
	Если ГСЧ = Неопределено Тогда
		ГСЧ = Новый ГенераторСлучайныхЧисел();
	КонецЕсли;
	
	Результат = Справочники.Клиенты.НайтиПоНаименованию(ФИОПосетителя, Истина);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		СправочникОбъект = Справочники.Клиенты.СоздатьЭлемент();
		СправочникОбъект.Заполнить(Неопределено);
		СправочникОбъект.Наименование = ФИОПосетителя;
		СправочникОбъект.Телефон = СлучайныйТелефон(ГСЧ);
		
		Если Не СправочникОбъект.ПроверитьЗаполнение() Тогда
			ВызватьИсключение "Ошибка создания клиента";
		КонецЕсли;
		
		СправочникОбъект.Записать();
		
		Результат = СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сулчайный телефон.
// Возвращает случайный номер телефона
// 
// Параметры:
//  ГСЧ - Неопределено, ГенераторСлучайныхЧисел - Генератор случайных чисел
// 
// Возвращаемое значение:
//  Строка - Сулчайный телефон
//
Функция СлучайныйТелефон(ГСЧ = Неопределено)
	
	Если ГСЧ = Неопределено Тогда
		ГСЧ = Новый ГенераторСлучайныхЧисел();
	КонецЕсли;
		
	ЦифрыТелефона = Новый Массив; // Массив из Строка
	ЦифрыТелефона.Добавить("+79");
	
	Для Счетчик = 1 По 9 Цикл
		ЦифрыТелефона.Добавить(Строка(ГСЧ.СлучайноеЧисло(0, 9)));
	КонецЦикла;
	
	Возврат СтрСоединить(ЦифрыТелефона);
	
КонецФункции

// Формирует посещения посетителя.
// 
// Параметры:
//  Посетитель - СправочникСсылка.Клиенты - Посетитель
//  ДатаПосещения - Дата - Дата посещения
//  СписокАттракционов - Массив из СправочникСсылка.Аттракционы - Список аттракционов
//  ГСЧ - ГенераторСлучайныхЧисел, Неопределено - Генератор случайных чисел
//
Процедура СформироватьПосещенияПосетителя(Посетитель, ДатаПосещения, СписокАттракционов, ГСЧ = Неопределено)
	
	Если ГСЧ = Неопределено Тогда
		ГСЧ = Новый ГенераторСлучайныхЧисел();
	КонецЕсли;
	
	// Для каждого посетителя выбираем на сколько аттракционов он пойдет
	// Провереяем для каждого посетителя есть ли биле, если билета нет - покупаем доступный для нужного аттракциона
	// Регистрируем посещение
	
	КоличествоАттракционовВсего  = СписокАттракционов.Количество();
	МаксКоличАттракционовЗаДень  = 7;
	КоличествоАттракционовЗаДень = ГСЧ.СлучайноеЧисло(1, МаксКоличАттракционовЗаДень);
	
	Для Счетчик = 1 По КоличествоАттракционовЗаДень Цикл
		ИндексАттракциона = ГСЧ.СлучайноеЧисло(0, КоличествоАттракционовВсего - 1);	
		Аттракцион = СписокАттракционов[ИндексАттракциона];
		
		//@skip-check query-in-loop
		ОснованиеПосещения = ТекущееОснование(Посетитель, Аттракцион);
		
		Если Не ЗначениеЗаполнено(ОснованиеПосещения) Тогда
			//@skip-check query-in-loop
			ОснованиеПосещения = КупитьБилет(Посетитель, Аттракцион, ДатаПосещения, ГСЧ);
		КонецЕсли;
		
		ЗарегистрироватьПосещение(ОснованиеПосещения, Аттракцион, ДатаПосещения);

	КонецЦикла;
	
КонецПроцедуры

// Текущее основание.
// 
// Параметры:
//  Посетитель - СправочникСсылка.Клиенты - Посетитель
//  Аттракцион - СправочникСсылка.Аттракционы - Аттракцион
// 
// Возвращаемое значение:
//  ДокументСсылка.ПосещениеАттракционов, Неопределено - Текущее основание
//
Функция ТекущееОснование(Посетитель, Аттракцион)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктивныеПосещенияОстатки.Основание КАК Основание
	|ИЗ
	|	РегистрНакопления.АктивныеПосещения.Остатки(, Основание.Клиент = &Клиент
	|	И ВидАттракциона В
	|		(ВЫБРАТЬ
	|			Аттракционы.ВидАттракциона
	|		ИЗ
	|			Справочник.Аттракционы КАК Аттракционы
	|		ГДЕ
	|			Аттракционы.ссылка = &Аттракцион)) КАК АктивныеПосещенияОстатки
	|ГДЕ
	|	АктивныеПосещенияОстатки.КоличествоПосещенийОстаток > 0";
	
	Запрос.УстановитьПараметр("Аттракцион", Аттракцион);
	Запрос.УстановитьПараметр("Клиент", Посетитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Основание; // см. ДокументСсылка.ПосещениеАттракционов
	
КонецФункции

// Купить билет.
// 
// Параметры:
//  Посетитель - СправочникСсылка.Клиенты - Посетитель
//  Аттракцион - СправочникСсылка.Аттракционы - Аттракцион
//  ДатаПосещения - Дата - Дата посещения
//  ГСЧ - ГенераторСлучайныхЧисел - Генератор случайных чисел
// 
// Возвращаемое значение:
//  ДокументСсылка.ПродажаБилета - Купить билет
Функция КупитьБилет(Посетитель, Аттракцион, ДатаПосещения, ГСЧ = Неопределено)
	
	Если ГСЧ = Неопределено Тогда
		ГСЧ = Новый ГенераторСлучайныхЧисел();
	КонецЕсли;
	
	ДоступныеПосещения = ДоступныеПосещения(Аттракцион);
	
	ИндексПосещения = ГСЧ.СлучайноеЧисло(0, ДоступныеПосещения.ВГраница());
	
	Посещение = ДоступныеПосещения[ИндексПосещения];
	
	ДокОбъект = Документы.ПродажаБилета.СоздатьДокумент();
	ДокОбъект.Дата = ДатаПосещения;
	ДокОбъект.Заполнить(Неопределено);
	ДокОбъект.Клиент = Посетитель;
	
	СтрокаТЧ = ДокОбъект.ПозицииПродажи.Добавить();
	СтрокаТЧ.Номенклатура = Посещение;
	СтрокаТЧ.Количество = 1;
	СтрокаТЧ.Цена = РегистрыСведений.ЦеныНоменклатуры.ЦенаНоменклатуры(Посещение, ДатаПосещения);
	СтрокаТЧ.Сумма = СтрокаТЧ.Цена;
	
	ДокОбъект.СуммаДокумента = ДокОбъект.ПозицииПродажи.Итог("Сумма");
	
	Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение "Ошибка при создании документа <Продажа билета>";
	КонецЕсли;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат ДокОбъект.Ссылка;
	
КонецФункции

// Доступные посещения.
// 
// Параметры:
//  Аттракцион - СправочникСсылка.Аттракционы - Аттракцион
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Номенклатура - Доступные посещения
Функция ДоступныеПосещения(Аттракцион) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.ВидАттракциона В
	|		(ВЫБРАТЬ
	|			Аттракционы.ВидАттракциона
	|		ИЗ
	|			Справочник.Аттракционы КАК Аттракционы
	|		ГДЕ
	|			Аттракционы.Ссылка = &Аттракцион)";

	Запрос.УстановитьПараметр("Аттракцион", Аттракцион);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
КонецФункции

// Зарегистрировать посещение.
// 
// Параметры:
//  ОснованиеПосещения - ДокументСсылка.ПродажаБилета - Основание посещения
//  Аттракцион - СправочникСсылка.Аттракционы - Аттракцион
//  ДатаПосещения - Дата - Дата посещения
//
Процедура ЗарегистрироватьПосещение(ОснованиеПосещения, Аттракцион, ДатаПосещения)
	
	ДокОбъект = Документы.ПосещениеАттракционов.СоздатьДокумент();
	ДокОбъект.Заполнить(Неопределено);
	ДокОбъект.Дата = ДатаПосещения;
	ДокОбъект.Основание = ОснованиеПосещения;
	ДокОбъект.Аттракцион = Аттракцион;
	
	Если Не ДокОбъект.ПроверитьЗаполнение() Тогда
		ВызватьИсключение "Ошибка при создании документа <Посещение аттракциона>";
	КонецЕсли;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

// Список аттракционов.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Аттракционы - Список аттракционов
Функция СписокАттракционов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Аттракционы.Ссылка
	|ИЗ
	|	Справочник.Аттракционы КАК Аттракционы";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#КонецЕсли
